{"version":3,"sources":["config/environment.js","services/OpenAQService.js","services/BaseService.js","components/LoadingContent/LoadingContent.js","components/MeasurementCell/MeasurementCell.js","components/Measurements/Measurements.js","services/MeasurementsService.js","components/CityCard/CityCard.js","components/CitiesList/CitiesList.js","components/AutoCompleteSelect/AutoCompleteSelect.js","App.js","serviceWorker.js","index.js"],"names":["environment","apiBaseUrl","allowedParameters","OpenAQService","_allowedParameters","config","queryParameters","arguments","length","undefined","limit","this","_query","_citiesUrl","parameter","_validateParametersForMeasurements","_measurementsUrl","lat","lon","_locationUrl","coordinates","concat","nearest","includes","Error","parameters","_this2","forEach","param","_validateParameterForMeasurements","url","_fetch","method","params","queryParams","Object","keys","map","key","value","encodeURIComponent","join","options","_constructQueryParamsString","fetch","headers","Accept","Content-Type","then","response","json","LoadingContent","_ref","_ref$linesCount","linesCount","lines","x","push","react_default","a","createElement","className","MeasurementCell_MeasurementCell","unit","displayValue","Measurements","measurements","measures","measure","MeasurementsService","city","country","_this","allMeasurements","promises","getMeasurements","Promise","all","result","foundMeasures","Set","measurement","results","add","has","CityCard","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","measurementsService","state","parametersToDisplay","_getMeasurementsForTheCity","prevProps","setState","getMeasurementsForACity","Component","CitiesList","cities","_ref$count","count","class","items","slice","components_CityCard_CityCard","AutoCompleteSelect","onInput","onSelect","values","placeholder","id","text","type","e","target","onChange","App","openAQService","autoCompleteCities","filteredParameters","citiesCount","selectedCity","onCityAutocompleteInput","bind","assertThisInitialized","onCitySelect","loadMoreCities","getCities","meta","found","res","objectSpread","navigator","geolocation","getCurrentPosition","asyncToGenerator","regenerator_default","mark","_callee","position","wrap","_context","prev","next","getNearestCityByCoordinates","coords","latitude","longitude","sent","find","stop","_x","apply","inputtedValue","filter","toLowerCase","indexOf","getSuggestedCities","parseInt","event","selectedParameters","toConsumableArray","children","option","selected","_this3","parametersOptions","style","marginLeft","marginRight","paddingTop","htmlFor","onParametersChange","width","height","name","multiple","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd0f1003.chunk.js","sourcesContent":["export default {\n  apiBaseUrl: 'https://api.openaq.org/v1',\n  allowedParameters: ['pm25', 'pm10', 'so2', 'no2', 'o3', 'co', 'bc']\n}\n","import BaseService from './BaseService';\nimport config from '../config/environment';\n\n/**\n * Class for communication with the OpenAQ Api.\n */\nclass OpenAQService extends BaseService {\n  /**\n   *\n   * @param queryParameters\n   * @return {Promise}\n   */\n  getCities(queryParameters = { limit: 100 }) {\n    return this._query(this._citiesUrl, queryParameters);\n  }\n\n  /**\n   *\n   * @param queryParameters\n   * @return {Promise}\n   */\n  getMeasurements(queryParameters = {}) {\n    if (queryParameters.parameter) {\n      this._validateParametersForMeasurements(queryParameters.parameter);\n    }\n\n    return this._query(this._measurementsUrl, queryParameters);\n  }\n\n  /**\n   *\n   * @param lat\n   * @param lon\n   * @return {Promise}\n   */\n  getNearestCityByCoordinates(lat, lon) {\n    return this._query(this._locationUrl, { coordinates: `${lat},${lon}`, limit: 1, nearest: ''});\n  }\n\n  /**\n   * Returns the `cities` module base url used in the OpenAQ API.\n   *\n   * @return {string}\n   * @private\n   */\n  get _citiesUrl() {\n    return `${this.apiBaseUrl}/cities`;\n  }\n\n  /**\n   * Returns the `latest` module base url used in the OpenAQ API.\n   *\n   * @return {string}\n   * @private\n   */\n  get _locationUrl() {\n    return `${this.apiBaseUrl}/locations`;\n  }\n\n  /**\n   * Returns the `measurements` module base url used in the OpenAQ API.\n   *\n   * @return {string}\n   * @private\n   */\n  get _measurementsUrl() {\n    return `${this.apiBaseUrl}/measurements`;\n  }\n\n  /**\n   * The allowed parameters for checking measurements.\n   *\n   * @type {[string,string,string,string,string,string,string]}\n   */\n  _allowedParameters = config.allowedParameters;\n\n  /**\n   * If the passed parameter is not found in the allowed parameters for the API, the function will throw an error.\n   *\n   * @param parameter {String}\n   * @throws Error\n   * @returns {Boolean}\n   * @private\n   */\n  _validateParameterForMeasurements(parameter) {\n    if (!this._allowedParameters.includes(parameter))\n      throw new Error(`You have included a filter by parameter which is not allowed (${parameter})`);\n\n    return true;\n  }\n\n  _validateParametersForMeasurements(parameters) {\n    if (typeof parameters === 'object') {\n      parameters.forEach(param => this._validateParameterForMeasurements(param));\n    } else {\n      this._validateParameterForMeasurements(parameters);\n    }\n\n    return true;\n  }\n}\n\nexport default OpenAQService;\n","import config from '../config/environment';\n\nclass BaseService {\n  /**\n   * @type {string}\n   */\n  apiBaseUrl = config.apiBaseUrl;\n\n  /**\n   * Query method for fetching data.\n   *\n   * @param url {String}\n   * @param queryParameters {Object}\n   * @return {Promise}\n   * @private\n   */\n  _query(url, queryParameters) {\n    return this._fetch(url, {\n      method: 'GET',\n      params: queryParameters\n    });\n  }\n\n  /**\n   * Creates the sub string for the get url used in _fetch.\n   * TODO: try to refactor it using the URL and URLSearchString Javascript APIs.\n   *\n   * @param queryParams {Object}\n   * @return {string}\n   * @private\n   */\n  _constructQueryParamsString(queryParams = {}) {\n    return Object.keys(queryParams)\n      .map(key => {\n        if (typeof queryParams[key] === 'object') {\n          return queryParams[key].map(value => `${encodeURIComponent(key)}[]=${encodeURIComponent(value)}`).join('&');\n        }\n        return encodeURIComponent(key) + '=' + encodeURIComponent(queryParams[key])\n      })\n      .join('&');\n  }\n\n  /**\n   * Private method used to make a request to the API.\n   * Creates and formats the url based on the options passed.\n   *  -params (or query parameters)\n   *\n   *  Uses the Javascript native fetch API.\n   *\n   * @param url {String}\n   * @param options {Object}\n   * @private\n   */\n  _fetch(url, options = {}) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (options.params) {\n      url = `${url}?${this._constructQueryParamsString(options.params)}`;\n    }\n    return fetch(url, {\n      headers\n    })\n      .then(response => response.json())\n  }\n}\n\nexport default BaseService;\n","import React from \"react\";\n\nexport default ({ linesCount = 1 }) => {\n  const lines = [];\n\n  for (let x = 0; x < linesCount; x++) {\n    lines.push(<div key={x} className={\"line\"}/>);\n  }\n\n  return (\n    <div className=\"ui placeholder\">\n      {lines}\n    </div>\n  );\n};\n","import React from \"react\";\nimport './MeasurementCell.scss';\nimport LoadingContent from '../LoadingContent/LoadingContent';\n\nexport default ({ parameter, unit, value }) => {\n  if (!parameter) {\n    return <LoadingContent linesCount={1} />;\n  }\n\n  const displayValue = !value ? (<span>-</span>) : (<span>{value} {unit}</span>);\n\n  return (\n    <div>\n      <span>{parameter}</span>: {displayValue}\n    </div>\n  );\n};\n","import React from 'react';\nimport LoadingContent from '../LoadingContent/LoadingContent';\nimport MeasurementCell from '../MeasurementCell/MeasurementCell';\n\nexport default ({ measurements }) => {\n  if (!measurements) {\n    return <LoadingContent linesCount={7} />;\n  }\n\n  const measures = [];\n  measurements.forEach(measure => measures.push(<MeasurementCell\n    key={measure.parameter}\n    parameter={measure.parameter}\n    unit={measure.unit}\n    value={measure.value} />));\n\n  return (\n    <div className=\"event\">\n      <div className=\"content\">\n        <div className=\"summary\">\n          {measures}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import OpenAQService from \"./OpenAQService\";\n\nclass MeasurementsService extends OpenAQService {\n  /**\n   * Returns an array of objects. For each measurement available and the corresponding data for the passed city.\n   *\n   * @param city\n   * @param country\n   * @param allMeasurements\n   * @return {Promise.<TResult>}\n   */\n  getMeasurementsForACity(city, country, allMeasurements = this._allowedParameters ) {\n    const promises = [];\n    allMeasurements.forEach(parameter => {\n      promises.push(this.getMeasurements({ city, country, parameter }));\n    });\n\n    return Promise.all(promises).then(measurements => {\n      const result = [];\n      const foundMeasures = new Set();\n\n      measurements.forEach(measurement => {\n        if (measurement.results.length === 0) return;\n\n        const measure = measurement.results[0];\n        foundMeasures.add(measure.parameter);\n\n        result.push({\n          parameter: measure.parameter,\n          value: measure.value,\n          unit: measure.unit,\n        })\n      });\n\n      allMeasurements.forEach(parameter => {\n        if(! foundMeasures.has(parameter)) {\n          result.push({\n            parameter: parameter,\n            value: null,\n            unit: null,\n          })\n        }\n      });\n\n      return result;\n    });\n  }\n}\n\nexport default MeasurementsService;\n","import React, { Component } from 'react';\nimport LoadingContent from '../LoadingContent/LoadingContent';\nimport Measurements from '../Measurements/Measurements';\nimport MeasurementsService from '../../services/MeasurementsService';\n\nclass CityCard extends Component {\n  constructor(props) {\n    super();\n\n    this.measurementsService = new MeasurementsService();\n    this.state = {\n      city: props.city,\n      country: props.country,\n      parametersToDisplay: props.parametersToDisplay,\n      measurements: null\n    };\n  }\n\n  componentDidMount() {\n    this._getMeasurementsForTheCity();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.parametersToDisplay !== this.props.parametersToDisplay) {\n      this.setState({\n        parametersToDisplay: this.props.parametersToDisplay,\n        measurements: null,\n      }, this._getMeasurementsForTheCity)\n    }\n  }\n\n  _getMeasurementsForTheCity() {\n    this.measurementsService.getMeasurementsForACity(this.state.city, this.state.country, this.state.parametersToDisplay).then(result => {\n      this.setState({\n        measurements: result,\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.city) {\n      return <LoadingContent linesCount={3} />;\n    }\n\n    return (\n      <div className=\"ui card\">\n        <div className=\"content\">\n          <div className=\"header\">{this.state.city}</div>\n        </div>\n        <div className=\"content\">\n          <h4 className=\"ui sub header\">Measurements</h4>\n          <Measurements measurements={this.state.measurements} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CityCard;\n","import React from \"react\";\nimport CityCard from '../CityCard/CityCard';\n\nexport default ({ cities, parametersToDisplay, count = 20 }) => {\n  if (!cities) {\n    return <div class=\"ui loader\" />;\n  }\n\n  const items = cities.slice(0, count).map(city => {\n    return (\n      <CityCard\n        key={city.city + city.country}\n        city={city.city}\n        country={city.country}\n        parametersToDisplay={parametersToDisplay}\n      />\n    );\n  });\n\n\n  return (\n    <div className=\"ui cards\">\n      {items}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default ({ onInput, onSelect, values, placeholder }) => {\n  if (! values) return '';\n\n  const options = values.map(value => <option key={value.id} value={value.id}>{value.text}</option>);\n\n  return (\n    <div>\n      <div className=\"ui input\">\n        <input type=\"text\" placeholder={`Search for a ${placeholder} ...`} onInput={(e) => onInput(e.target.value)} />\n      </div>\n      <select placeholder={`Select ${placeholder}`} onChange={e => onSelect(e.target.value)}>\n        <option value=\"\">Select {placeholder}</option>\n        {options}\n      </select>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport OpenAQService from './services/OpenAQService';\nimport config from './config/environment';\n\nimport CitiesList from './components/CitiesList/CitiesList';\nimport CityCard from './components/CityCard/CityCard';\nimport AutoComplete from './components/AutoCompleteSelect/AutoCompleteSelect';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n\n    this.openAQService = new OpenAQService();\n    this.state = {\n      cities: [],\n      autoCompleteCities: [],\n      filteredParameters: config.allowedParameters,\n      citiesCount: 20,\n      selectedCity: null,\n    };\n\n    this.onCityAutocompleteInput = this.onCityAutocompleteInput.bind(this);\n    this.onCitySelect = this.onCitySelect.bind(this);\n    this.loadMoreCities = this.loadMoreCities.bind(this);\n  }\n\n  async componentDidMount() {\n    let cities = await this.openAQService.getCities();\n    if (cities.meta && cities.meta.found > 100) {\n      cities = await this.openAQService.getCities({ limit: cities.meta.found });\n    }\n\n    let id = 0;\n    cities = cities.results.map(res => { return { ...res, id: ++id, text: res.city } });\n    this.setState({\n      cities,\n      autoCompleteCities: cities\n    });\n\n    navigator.geolocation.getCurrentPosition(async position => {\n      const results = await this.openAQService.getNearestCityByCoordinates(position.coords.latitude, position.coords.longitude);\n\n      if (results.results.length) {\n        const nearest = results.results[0];\n        const city = this.state.cities.find(city => city.city === nearest.city && city.country === nearest.country);\n        this.setState({\n          selectedCity: city\n        });\n      }\n    });\n  }\n\n  loadMoreCities() {\n    this.setState({\n      citiesCount: this.state.citiesCount + 20,\n    });\n  }\n\n  getSuggestedCities(inputtedValue) {\n    if (! inputtedValue) {\n      this.setState({\n        autoCompleteCities: this.state.cities\n      });\n\n      return;\n    }\n\n    this.setState({\n      autoCompleteCities: this.state.cities.filter(city => city.city.toLowerCase().indexOf(inputtedValue.toLowerCase()) !== -1)\n    });\n  }\n\n  onCityAutocompleteInput(inputtedValue) {\n    this.getSuggestedCities(inputtedValue);\n  }\n\n  onCitySelect(value) {\n    this.setState({\n      selectedCity: this.state.cities.find(city => city.id === parseInt(value))\n    });\n  }\n\n  onParametersChange(event) {\n    const selectedParameters = [...event.target.children]\n      .filter(option => option.selected)\n      .map(option => option.value);\n\n    if (selectedParameters.includes('all')) {\n      this.setState({\n        filteredParameters: config.allowedParameters\n      });\n\n      return;\n    }\n\n    this.setState({\n      filteredParameters: selectedParameters\n    });\n  }\n\n  render() {\n    const bodyStyle = {\n      marginLeft: '5%',\n      marginRight: '5%',\n      paddingTop: '3%',\n    };\n\n    const selectedCity = this.state.selectedCity ? (\n      <div>\n        <div>Selected city information</div>\n        <CityCard\n          key={this.state.selectedCity.id}\n          city={this.state.selectedCity.city}\n          country={this.state.selectedCity.country}\n          parametersToDisplay={this.state.filteredParameters}\n        />\n        <hr/>\n      </div>\n    ) : '';\n\n    const parametersOptions = config.allowedParameters.map(param => <option key={param} value={param}>{param}</option>)\n\n    return (\n      <div className=\"App\" style={bodyStyle}>\n        <AutoComplete\n          values={this.state.autoCompleteCities}\n          onInput={this.onCityAutocompleteInput}\n          onSelect={this.onCitySelect}\n          placeholder=\"city\"\n        />\n        <hr/>\n        <div>\n          <label htmlFor=\"\">Filter parameters.</label>\n          <select onChange={e => this.onParametersChange(e)} style={{width:\"200px\", height:\"150px\"}} name=\"\" multiple id=\"\">\n            <option key=\"all\" value=\"all\">All</option>\n            {parametersOptions}\n          </select>\n          <hr/>\n        </div>\n        {selectedCity}\n        <CitiesList\n          cities={this.state.cities}\n          parametersToDisplay={this.state.filteredParameters}\n          count={this.state.citiesCount}\n        />\n        <hr/>\n        <button className=\"massive ui button\" onClick={this.loadMoreCities}>Load more</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}